package main

/*
  Ref: github.com/songjiayang/natat
*/

import (
    "flag"
    "fmt"
    "log"
    "net"
    "strings"

    //"gortc.io/stun"
    "github.com/pion/stun" //Pion's STUN is ported from gortc.io/stun
)

type BindingResponse struct {
    Mapped       *stun.MappedAddress
    XORMapped    *stun.XORMappedAddress
    Other        *stun.XORMappedAddress//*stun.OtherAddress
    Origin       *stun.XORMappedAddress
}

const (
    AttrSourceAddress   stun.AttrType = 0x0004
    AttrChangedAddress  stun.AttrType = 0x0005 //ref: stun.AttrOtherAddress = 0x802C
    AttrResponseOrigin  stun.AttrType = 0x802b
)
var AttrTypeString = map[stun.AttrType]string {
        AttrSourceAddress: "SOURCE-ADDRESS",
        AttrChangedAddress: "CHANGED-ADDRESS",
        AttrResponseOrigin: "RESPONSE-ORIGIN",
    }


var (
    bindAddrStr = flag.String("bind", "0.0.0.0:12345", "The local binding address")
    stunAddrStr = flag.String("stun", "stun.l.google.com:19302", "The main STUN server")
    stunAddr1Str = flag.String("stun1", "stun1.l.google.com:19302", "The altenative STUN server 1")
    stunAddr2Str = flag.String("stun2", "stun2.l.google.com:19302", "The altenative STUN server 2")
)

func init() {
    flag.Parse()
}

func main() {
    flag.Parse()

    // resolve UDP address
    bindAddr := resolveUDPAddr(*bindAddrStr)
    stunAddr := resolveUDPAddr(*stunAddrStr)
    //stunAddr1 := resolveUDPAddr(*stunAddr1Str)
    //stunAddr2 := resolveUDPAddr(*stunAddr2Str)

    log.Println("start stun server ping...")
    // send STUN ping request
    stunMustRequest(bindAddr, stunAddr)
    /*res1 := stunMustRequest(bindAddr, stunAddr1)

    log.Printf("%v mapped: %v -> %v\n", *stunAddrStr, bindAddr, res.XORMapped)
    log.Printf("%v mapped: %v -> %v\n", *stunAddr1Str, bindAddr, res1.XORMapped)

    log.Println("start NAT type assert...")
    natAssert(bindAddr, res.XORMapped, res1.XORMapped)
    */
}

func natAssert(bindAddr *net.UDPAddr, xorAddr, xorAddr2 *stun.XORMappedAddress) {
    var natType = "Symmetric"

    switch {
    case IsSymmetric(xorAddr, xorAddr2):

    default:
        natType = "Cone"
    }

    log.Printf("It's %s NAT\n", natType)
}

func stunRequest(bindAddr, stunAddr *net.UDPAddr) (res BindingResponse, err error) {
    // use DialUDP() for setting local (bind) address, which is unsupported by Dial()
    conn, err := net.DialUDP("udp", bindAddr, stunAddr)
    client, err := stun.NewClient(conn); defer client.Close()
    if err != nil { return }

    // send the binding request and receive response from STUN server
    reqmsg := stun.MustBuild(stun.TransactionID, stun.BindingRequest);
    reqmsg.Add(stun.AttrChangeRequest, []byte{0,0,0,6})
    /*DEBUG*/log.Printf("%v request = %v\n",stunAddr,reqmsg)
    for _,attr := range reqmsg.Attributes {
        log.Printf("\t%v (l=%v)\n", namedAttr(attr.String()),attr.Length)
    }
    resmsg := stun.New()
    err = client.Do(reqmsg, func(res stun.Event) {
        if res.Error != nil { log.Printf("%v\n",res.Error); return }
        res.Message.CloneTo(resmsg) //(from godoc:) Do not reuse event outside Handler.
        //*DEBUG*/log.Printf("%v TransactionID=%v\n",stunAddr,res.TransactionID)
    });
    if err != nil { return }
    //*DEBUG*/log.Printf("%v TransactionID=%v\n",stunAddr,resmsg.TransactionID)

    // parse the response
    res = BindingResponse{ &stun.MappedAddress{}, &stun.XORMappedAddress{}, &stun.XORMappedAddress{},
        &stun.XORMappedAddress{} }
    if res.Mapped.GetFrom(resmsg) != nil { res.Mapped = nil }
    if res.XORMapped.GetFrom(resmsg) != nil { res.XORMapped = nil }
    if res.Other.GetFromAs(resmsg,stun.AttrOtherAddress) != nil { res.Other = nil
        //fall back to Classic STUN
        changed := stun.XORMappedAddress{}
        if changed.GetFromAs(resmsg,AttrChangedAddress) == nil { res.Other = &changed }
    }
    if res.Origin.GetFromAs(resmsg,AttrResponseOrigin) != nil { res.Origin = nil
        //fall back to Classic STUN
        source := stun.XORMappedAddress{}
        if source.GetFromAs(resmsg,AttrSourceAddress) == nil { res.Origin = &source }
    }
    //software := stun.Software{}; software.GetFrom(resmsg)
    software := stun.TextAttribute{}; software.GetFromAs(resmsg,stun.AttrSoftware)
    /*DEBUG*/log.Printf("%v response = %v %+v (Software:%v)\n",stunAddr,resmsg,res,string(software))
    for _,attr := range resmsg.Attributes {
        log.Printf("\t%v (l=%v)\n", namedAttr(attr.String()),attr.Length)
    }

    return
}

func stunMustRequest(bindAddr, stunAddr *net.UDPAddr) (res BindingResponse) {
    res,err := stunRequest(bindAddr, stunAddr)
    if err != nil {
        log.Panicf("stunRequest(%v -> %v) error: %v", bindAddr, stunAddr, err)
    }
    return
}

func namedAttr(s string) string {
    for id,name := range AttrTypeString {
        s = strings.Replace(s, fmt.Sprintf("%#x:",uint(id)), name+":", 1)
    }
    return s
}

func IsSymmetric(xorAddr, xorAddr2 *stun.XORMappedAddress) bool {
    return xorAddr.String() != xorAddr2.String()
}


func resolveUDPAddr(addrStr string) *net.UDPAddr {
    addr, err := net.ResolveUDPAddr("udp", addrStr)
    if err != nil {
        log.Panicf("\"%v\" resolution failed: %v", addrStr, err)
    }
    return addr
}
